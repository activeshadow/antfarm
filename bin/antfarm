#!/usr/bin/env ruby

require 'antfarm'
require 'ronn'
require 'trollop'

COMMANDS  = ['console', 'help', 'init', 'list', 'man', 'server']
COMMANDS << Antfarm.plugins.keys
COMMANDS.flatten

parser = Trollop::Parser.new do
  version "ANTFARM #{Antfarm.version} - (c) #{Time.now.strftime('%Y')} Sandia National Laboratories"
  banner <<-EOF
ANTFARM is a passive network mapping tool capable of parsing data files generated by common network
administration tools, network equipment configuration files, etc. Designed for use when assessing
critical infrastructure control systems.

Usage:
  antfarm <globals> console             # Drop into a Pry console with access to data models
  antfarm <globals> help <plugin>       # Display the application or plugin help message
  antfarm <globals> list                # List the available plugins
  antfarm <globals> init                # Initialize the database for the given environment
  antfarm <globals> man <plugin>        # Show man page for ANTFARM or specified plugin
  antfarm <globals> server              # Start the web server for the given environment
  antfarm <globals> <plugin> <options>  # Execute given plugin with given options

Where <globals> are:
  EOF

  opt :environment,
      "Environment to use for this instance of ANTFARM (defaults to 'antfarm')",
      :type => String
  opt :log_level,
      "Level to log ANTFARM messages (defaults to 'warn')",
      :type => String
  opt :prefix,
      "Default subnet prefix to use if an IP address doesn't specify it (defaults to 30)",
      :type => Integer

  stop_on COMMANDS
end

options = Trollop::with_standard_exception_handling(parser) do
  parser.parse
end

command = ARGV.shift
command = 'help' if command.nil? or command.empty?

# Setting global parameters and processing application...

Antfarm::Initializer.run do |config|
  config.environment = options[:environment] if options[:environment]
  config.log_level   = options[:log_level]   if options[:log_level]
  config.prefix      = options[:prefix]      if options[:prefix]
  config.outputter   = lambda { |msg| STDOUT.puts msg.join }
end

# Executing command...

case command
when 'man'
  groff = 'groff -Wall -mtty-char -mandoc -Tascii'
  pager = ENV['MANPAGER'] || ENV['PAGER'] || 'more'
  pid   = nil

  if ARGV.empty?
    path = Antfarm.root + '/man/antfarm.1.ronn'
  else
    plugin = ARGV.shift

    if File.exists?("#{Antfarm.root}/lib/antfarm/plugins/#{plugin}/man/#{plugin}.1.ronn")
      path = Antfarm.root + "/lib/antfarm/plugins/#{plugin}/man/#{plugin}.1.ronn"
    elsif File.exists?("#{Antfarm::Helpers.user_plugins_dir}/#{plugin}/man/#{plugin}.1.ronn")
      path = Antfarm::Helpers.user_plugins_dir + "/#{plugin}/man/#{plugin}.1.ronn"
    end
  end

  if path
    doc = Ronn::Document.new(path, { 'styles' => ['man'] })

    if doc
      rd, wr = IO.pipe
      if pid = fork
        rd.close
      else
        wr.close
        STDIN.reopen rd
        exec "#{groff} | #{pager}"
      end

      wr.puts(doc.convert('roff'))

      if pid
        wr.close
        Process.wait
      end
    else
      Antfarm.output 'There was an error rendering the man page'
    end
  else
    Antfarm.output 'The man page you requested does not exist'
  end
when 'console'
  require 'pry'
  include Antfarm::Models

  Pry.config.prompt_name  = 'console'
  Pry.config.history.file = Antfarm::Helpers.history_file

  Antfarm.plugins.each do |name,plugin|
    Pry::Commands.block_command name, plugin.info[:desc] do |opts|
    end
  end

  Antfarm.pry
when 'help'
  if ARGV.empty?
    parser.educate
  else
    plugin = ARGV.shift
    if Antfarm.plugins.keys.include?(plugin)
      plugin = Antfarm.plugins[plugin]

      # TODO: write parser creator and options helper methods
      parser = Trollop::Parser.new do
        banner "#{plugin.name} - #{plugin.info[:desc]}\n\nOptions:"
        plugin.options.each do |option|
          opt option[:name].to_sym, option[:desc], :type => option[:type], :required => option[:required]
        end
      end

      parser.educate
    else
      Antfarm.output "Unknown plugin '#{plugin}' given. Below is a list of known plugins.\n\n"

      # TODO: write helper method for listing plugins
      Antfarm.plugins.each do |k,v|
        Antfarm.output "#{k} - #{v.info[:desc]}"
      end
    end
  end
when 'list'
  if Antfarm.plugins.empty?
    Antfarm.output 'No plugins currently loaded.'
  else
    Antfarm.plugins.each do |k,v|
      Antfarm.output "#{k} - #{v.info[:desc]}"
    end
  end
when 'init'
  require 'fileutils'

  Antfarm.output "Updating database for #{Antfarm.env} environment!\n\n"

  FileUtils.rm_f(Antfarm::Helpers.db_file)
  FileUtils.rm_f(Antfarm::Helpers.log_file)

  load 'antfarm/schema.rb'
when 'server'
  require 'antfarm/web/app'
  Antfarm::Web::Server.run! :environment => 'development', :server => 'thin', :port => 8080
else
  if Antfarm.plugins.keys.include?(command)
    plugin = Antfarm.plugins[command]

    # TODO: only require if a default isn't set...
    options = Trollop::options do
      banner "#{plugin.name} - #{plugin.info[:desc]}\n\nOptions:"
      plugin.options.each do |option|
        opt option[:name].to_sym, option[:desc], :type => option[:type], :required => option[:required]
      end
    end

    Antfarm.output options

    plugin.run(options)
  else
    Antfarm.output "Invalid command '#{command}' given. See help message below for valid commands.\n\n"
    parser.educate
  end
end
